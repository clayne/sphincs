/*
Implementation of Haraka256 and Haraka512 for ARM.
*/
#ifndef HARAKA_H_
#define HARAKA_H_

#include <arm_neon.h>

#define u64 unsigned long
#define u128 uint8x16_t


// Note that the round constants differ from the x86 implementation due to the
// different order in which the key is added with the ARM AES instruction set.

static const uint8x16_t rc256[22] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0x9d,0x7b,0x81,0x75,0xf0,0xfe,0xc5,0xb2,0xa,0xc0,0x20,0xe6,0x4c,0x70,0x84,0x6},
                                     {0x17,0xf7,0x8,0x2f,0xa4,0x6b,0xf,0x64,0x6b,0xa0,0xf3,0x88,0xe1,0xb4,0x66,0x8b},
                                     {0x14,0x91,0x2,0x9f,0x79,0x4f,0x5b,0xfd,0x60,0x9d,0x2,0xcf,0xaf,0xbc,0xf3,0xbb},
                                     {0x98,0x84,0xf2,0x53,0x8,0x4f,0x7b,0x2e,0x2d,0xde,0x2,0x34,0xe6,0xea,0xd6,0xe},
                                     {0x44,0x70,0x39,0xbe,0x1c,0xcd,0xee,0x79,0x8b,0x44,0x72,0x48,0xcb,0xb0,0xcf,0xcb},
                                     {0x7b,0x5,0x8a,0x2b,0xed,0x35,0x53,0x8d,0xb7,0x32,0x90,0x6e,0xee,0xcd,0xea,0x7e},
                                     {0x1b,0xef,0x4f,0xda,0x3b,0xb,0xc7,0x1f,0x61,0x27,0x41,0xe2,0xe2,0xfd,0x5f,0x67},
                                     {0xd0,0x7c,0x2e,0x5e,0x7,0xcc,0xca,0xaf,0x43,0x8f,0xc2,0x67,0xb0,0xd9,0x24,0x29},
                                     {0xee,0x65,0xd4,0xb9,0xca,0x8f,0xdb,0xec,0xe9,0x7f,0x86,0xe6,0xf1,0x63,0x4d,0xab},
                                     {0x33,0x7e,0x3,0xad,0x4f,0x40,0x2a,0x5b,0x64,0xcd,0xb7,0xd4,0x84,0xbf,0x30,0x1c},
                                     {0x0,0x98,0xf6,0x8d,0x8a,0x2d,0x9d,0x5c,0x2e,0x8b,0x2,0x69,0xc8,0x9e,0xaa,0x4a},
                                     {0xbf,0x23,0x17,0x94,0x72,0x55,0x6f,0xde,0xb9,0xb,0xcc,0xb2,0xa6,0x78,0x4,0xfa},
                                     {0xd4,0x9f,0x12,0x29,0x2e,0x4f,0xfa,0xe,0x12,0x2a,0x77,0x6b,0x2b,0x9f,0xb4,0xdf},
                                     {0xee,0x12,0x6a,0xbb,0xae,0x11,0xd6,0x32,0x36,0xa2,0x49,0xf4,0x44,0x3,0xa1,0x1e},
                                     {0xa6,0xec,0xa8,0x9c,0xec,0x93,0xe5,0x27,0xc9,0x0,0x96,0x5f,0xe3,0xc7,0xa2,0x78},
                                     {0x84,0x0,0x5,0x4b,0x4f,0x9c,0x19,0x9d,0x88,0x49,0x4,0xaf,0xd8,0x5e,0x2,0x21},
                                     {0x73,0x1,0xd4,0x82,0xcd,0x2e,0x28,0xb9,0xb7,0xc9,0x59,0xa7,0xf8,0xaa,0x3a,0xbf},
                                     {0x6b,0x7d,0x30,0x10,0xd9,0xef,0xf2,0x37,0x17,0xb0,0x86,0x61,0xd,0x70,0x60,0x62},
                                     {0xc6,0x9a,0xfc,0xf6,0x53,0x91,0xc2,0x81,0x43,0x4,0x30,0x21,0xc2,0x45,0xca,0x5a},
                                     {0x3a,0x94,0xd1,0x36,0xe8,0x92,0xaf,0x2c,0xbb,0x68,0x6b,0x22,0x3c,0x97,0x23,0x92}};


static const uint8x16_t rc512[44] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                     {0x9d,0x7b,0x81,0x75,0xf0,0xfe,0xc5,0xb2,0xa,0xc0,0x20,0xe6,0x4c,0x70,0x84,0x6},
                                     {0x17,0xf7,0x8,0x2f,0xa4,0x6b,0xf,0x64,0x6b,0xa0,0xf3,0x88,0xe1,0xb4,0x66,0x8b},
                                     {0x14,0x91,0x2,0x9f,0x60,0x9d,0x2,0xcf,0x98,0x84,0xf2,0x53,0x2d,0xde,0x2,0x34},
                                     {0x79,0x4f,0x5b,0xfd,0xaf,0xbc,0xf3,0xbb,0x8,0x4f,0x7b,0x2e,0xe6,0xea,0xd6,0xe},
                                     {0xcb,0xb0,0xcf,0xcb,0x43,0x8f,0xc2,0x67,0xee,0xcd,0xea,0x7e,0xb0,0xd9,0x24,0x29},
                                     {0x1b,0xef,0x4f,0xda,0x44,0x70,0x39,0xbe,0x3b,0xb,0xc7,0x1f,0x7b,0x5,0x8a,0x2b},
                                     {0x61,0x27,0x41,0xe2,0x1c,0xcd,0xee,0x79,0xe2,0xfd,0x5f,0x67,0xed,0x35,0x53,0x8d},
                                     {0x8b,0x44,0x72,0x48,0xd0,0x7c,0x2e,0x5e,0xb7,0x32,0x90,0x6e,0x7,0xcc,0xca,0xaf},
                                     {0xee,0x65,0xd4,0xb9,0xca,0x8f,0xdb,0xec,0xe9,0x7f,0x86,0xe6,0xf1,0x63,0x4d,0xab},
                                     {0x33,0x7e,0x3,0xad,0x4f,0x40,0x2a,0x5b,0x64,0xcd,0xb7,0xd4,0x84,0xbf,0x30,0x1c},
                                     {0x0,0x98,0xf6,0x8d,0x2e,0x8b,0x2,0x69,0xbf,0x23,0x17,0x94,0xb9,0xb,0xcc,0xb2},
                                     {0x8a,0x2d,0x9d,0x5c,0xc8,0x9e,0xaa,0x4a,0x72,0x55,0x6f,0xde,0xa6,0x78,0x4,0xfa},
                                     {0x2b,0x9f,0xb4,0xdf,0x88,0x49,0x4,0xaf,0x44,0x3,0xa1,0x1e,0xd8,0x5e,0x2,0x21},
                                     {0xa6,0xec,0xa8,0x9c,0xd4,0x9f,0x12,0x29,0xec,0x93,0xe5,0x27,0xee,0x12,0x6a,0xbb},
                                     {0xc9,0x0,0x96,0x5f,0x2e,0x4f,0xfa,0xe,0xe3,0xc7,0xa2,0x78,0xae,0x11,0xd6,0x32},
                                     {0x12,0x2a,0x77,0x6b,0x84,0x0,0x5,0x4b,0x36,0xa2,0x49,0xf4,0x4f,0x9c,0x19,0x9d},
                                     {0x73,0x1,0xd4,0x82,0xcd,0x2e,0x28,0xb9,0xb7,0xc9,0x59,0xa7,0xf8,0xaa,0x3a,0xbf},
                                     {0x6b,0x7d,0x30,0x10,0xd9,0xef,0xf2,0x37,0x17,0xb0,0x86,0x61,0xd,0x70,0x60,0x62},
                                     {0xc6,0x9a,0xfc,0xf6,0x53,0x91,0xc2,0x81,0x43,0x4,0x30,0x21,0xc2,0x45,0xca,0x5a},
                                     {0x3a,0x94,0xd1,0x36,0xe8,0x92,0xaf,0x2c,0xbb,0x68,0x6b,0x22,0x3c,0x97,0x23,0x92},
                                     {0x38,0x92,0xbf,0xd3,0x68,0x62,0x60,0xbb,0xe5,0x3c,0x86,0xdb,0xdc,0xd3,0x4b,0x73},
                                     {0xb1,0x12,0x22,0xcb,0xb4,0x71,0x10,0xe5,0x7d,0xf7,0x2b,0xc7,0x8d,0x12,0xe1,0x24},
                                     {0xe3,0x8d,0xe4,0x83,0x58,0xb9,0xba,0x6c,0x4e,0x1a,0xb9,0x2d,0xdd,0xfd,0x3d,0x93},
                                     {0xeb,0x86,0x58,0x22,0x9c,0xa0,0xeb,0xff,0x77,0xc6,0xf0,0xae,0x9c,0xd1,0xe4,0xe2},
                                     {0x4e,0x92,0xb3,0x2c,0xc4,0x15,0x14,0x4b,0x43,0x1b,0x30,0x61,0xc3,0x47,0xbb,0x43},
                                     {0x99,0x68,0xeb,0x16,0xdd,0x31,0xb2,0x3,0xf6,0xef,0x7,0xe7,0xa8,0x75,0xa7,0xdb},
                                     {0x2c,0x47,0xca,0x7e,0x2,0x23,0x5e,0x8e,0x77,0x59,0x75,0x3c,0x4b,0x61,0xf3,0x6d},
                                     {0xf9,0x17,0x86,0xb8,0xb9,0xe5,0x1b,0x6d,0x77,0x7d,0xde,0xd6,0x17,0x5a,0xa7,0xcd},
                                     {0xf0,0x43,0x6b,0xec,0x75,0xc,0xee,0x2c,0x50,0x69,0x1e,0xcb,0xa1,0xa5,0xb1,0xf0},
                                     {0xd9,0xd0,0xe,0x60,0x5d,0xee,0x46,0xa9,0x50,0xa3,0xa4,0x63,0xc1,0x27,0xf3,0x3b},
                                     {0x53,0x3,0xed,0xe4,0x9d,0x6,0x6c,0x9d,0xbc,0xba,0xbb,0x80,0x59,0x11,0x53,0xa2},
                                     {0xaa,0xe9,0xa8,0x6b,0x9c,0x61,0xda,0x0,0x2b,0x33,0x57,0xf9,0xab,0xc,0xe9,0x96},
                                     {0x39,0xca,0x8d,0x93,0x30,0xde,0xd,0xab,0x88,0x29,0x96,0x5e,0x2,0xb1,0x3d,0xae},
                                     {0x42,0xb4,0x75,0x2e,0xa8,0xf3,0x14,0x88,0xb,0xa4,0x54,0xd5,0x38,0x8f,0xbb,0x17},
                                     {0xf6,0x16,0xa,0x36,0x79,0xb7,0xb6,0xae,0xd7,0x7f,0x42,0x5f,0x5b,0x8a,0xbb,0x34},
                                     {0xde,0xaf,0xba,0xff,0x18,0x59,0xce,0x43,0x38,0x54,0xe5,0xcb,0x41,0x52,0xf6,0x26},
                                     {0x78,0xc9,0x9e,0x83,0xf7,0x9c,0xca,0xa2,0x6a,0x2,0xf3,0xb9,0x54,0x9a,0xe9,0x4c},
                                     {0x35,0x12,0x90,0x22,0x28,0x6e,0xc0,0x40,0xbe,0xf7,0xdf,0x1b,0x1a,0xa5,0x51,0xae},
                                     {0xcf,0x59,0xa6,0x48,0xf,0xbc,0x73,0xc1,0x2b,0xd2,0x7e,0xba,0x3c,0x61,0xc1,0xa0},
                                     {0xa1,0x9d,0xc5,0xe9,0xfd,0xbd,0xd6,0x4a,0x88,0x82,0x28,0x2,0x3,0xcc,0x6a,0x75}};

#define XOR(a, b) veorq_u8(a, b)
#define LOAD(src) vld1q_u8(src)
#define STORE(dest,src) vst1q_u8(dest,src)
#define ZIP2(a, b) (u128) vzip2q_u32((uint32x4_t)a, (uint32x4_t)b)
#define ZIP1(a, b) (u128) vzip1q_u32((uint32x4_t)a, (uint32x4_t)b)

#define AES2(s0, s1, rci) \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc256[rci])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc256[rci + 1])); \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc256[rci + 2])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc256[rci + 3]));

#define AES2_4x(s0, s1, s2, s3, rci) \
  AES2(s0[0], s0[1], rci); \
  AES2(s1[0], s1[1], rci); \
  AES2(s2[0], s2[1], rci); \
  AES2(s3[0], s3[1], rci);

#define AES2_8x(s0, s1, s2, s3, s4, s5, s6, s7, rci) \
  AES2_4x(s0, s1, s2, s3, rci); \
  AES2_4x(s4, s5, s6, s7, rci);

#define AES4(s0, s1, s2, s3, rci) \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc512[rci])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc512[rci + 1])); \
  s2 = vaesmcq_u8(vaeseq_u8(s2, rc512[rci + 2])); \
  s3 = vaesmcq_u8(vaeseq_u8(s3, rc512[rci + 3])); \
  s0 = vaesmcq_u8(vaeseq_u8(s0, rc512[rci + 4])); \
  s1 = vaesmcq_u8(vaeseq_u8(s1, rc512[rci + 5])); \
  s2 = vaesmcq_u8(vaeseq_u8(s2, rc512[rci + 6])); \
  s3 = vaesmcq_u8(vaeseq_u8(s3, rc512[rci + 7])); \

#define AES4_4x(s0, s1, s2, s3, rci) \
  AES4(s0[0], s0[1], s0[2], s0[3], rci); \
  AES4(s1[0], s1[1], s1[2], s1[3], rci); \
  AES4(s2[0], s2[1], s2[2], s2[3], rci); \
  AES4(s3[0], s3[1], s3[2], s3[3], rci);

#define AES4_8x(s0, s1, s2, s3, s4, s5, s6, s7, rci) \
  AES4_4x(s0, s1, s2, s3, rci); \
  AES4_4x(s4, s5, s6, s7, rci);

#define MIX2(s0, s1) \
  tmp = ZIP2(s0, s1); \
  s0 = ZIP1(s0, s1); \
  s1 = tmp;

#define MIX4(s0, s1, s2, s3) \
  tmp  = ZIP1(s0, s1); \
  s0 = ZIP2(s0, s1); \
  s1 = ZIP1(s2, s3); \
  s2 = ZIP2(s2, s3); \
  s3 = ZIP1(s0, s2); \
  s0 = ZIP2(s0, s2); \
  s2 = ZIP2(s1, tmp); \
  s1 = ZIP1(s1, tmp);

#define TRUNCSTORE(out, s0, s1, s2, s3) \
  *(u64*)(out) = vreinterpretq_u64_u8(s0)[1]; \
  *(u64*)(out + 8) = vreinterpretq_u64_u8(s1)[1]; \
  *(u64*)(out + 16) = vreinterpretq_u64_u8(s2)[0]; \
  *(u64*)(out + 24) = vreinterpretq_u64_u8(s3)[0];

void haraka_testvectors();

void haraka_f(unsigned char *out, const unsigned char *in);
void haraka_f_4x(unsigned char *out, const unsigned char *in);
void haraka_f_8x(unsigned char *out, const unsigned char *in);

void haraka_h(unsigned char *out, const unsigned char *in);
void haraka_h_4x(unsigned char *out, const unsigned char *in);
void haraka_h_8x(unsigned char *out, const unsigned char *in);


#endif
